<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:view="socialfaceicon.view.*"
	
	backgroundAlpha="0"
	backgroundColor="#FF0000"
	
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off"
	
	mouseDown="onMouseDown(event)"
	click="onClick(event)"
	rollOver="onRollOver(event)"
	rollOut="onRollOut(event)"
	doubleClick="onDoubleClick()"
	doubleClickEnabled="true"
	>
	<mx:Script>
		<![CDATA[
			import socialfaceicon.utils.DateUtil;
			import socialfaceicon.model.IStatus;
			import socialfaceicon.model.friendfeed.threads.UpdateFFeedAbstractEntriesThread;
			import socialfaceicon.model.friendfeed.threads.UpdateFFeedUserEntriesThread;
			import socialfaceicon.model.friendfeed.threads.FFeedUserEntriesThread;
			import socialfaceicon.model.friendfeed.FFeedUser;
			import socialfaceicon.model.friendfeed.FFeedEntry;
			import socialfaceicon.model.IconType;
			import mx.formatters.SwitchSymbolFormatter;
			import flash.utils.clearTimeout;
			import flash.utils.setTimeout;
			import socialfaceicon.events.MouseDragStartEvent;
			import flash.net.navigateToURL;
			import mx.events.FlexEvent;
			import socialfaceicon.model.ImageCache;
			import mx.events.DragEvent;
			import mx.core.DragSource;
			import mx.managers.DragManager;
			import socialfaceicon.model.IUser;
			
			public static const DELETE:String = "delete";
			
			[Embed(source="socialfaceicon/assets/face-plain.png")]
			private var DefaultIconImage:Class;
			
			[Bindable]
			private var _iconName:String;
			private var _iconNameChanged:Boolean = false;
			private var _iconImageUrl:String;
			private var _iconImageUrlChanged:Boolean = false;
			private var _iconStatus:IStatus;
			private var _iconStatusChanged:Boolean = false;
			private var _iconTypeImage:Class;
			private var _iconTypeImageChanged:Boolean = false;
			private var _iconIsHot:Boolean = false;
			private var _iconIsHotChanged:Boolean = false;
			//private var imgCache:ImageCache;
			
			private var iconUserUrl:String;
			private var mousePauseTimeoutId:int;
			private var mouseDragStartEvent:MouseDragStartEvent;
			
			private static var selectedFaceIcon:FaceIcon = null;
			
			public function init(user:IUser):FaceIcon
			{
				this._iconName = user.iconName;
				this._iconNameChanged = true;
				this._iconImageUrl = user.iconImageUrl;
				this._iconImageUrlChanged = true;
				this._iconTypeImage = user.iconTypeImage;
				this._iconTypeImageChanged = true;
				var hotCount:uint = user.getRecentStatusesCount(12 * 60);
				this._iconIsHot = (hotCount > 3);
				this._iconIsHotChanged = true;
				
				this.iconUserUrl = user.iconUserUrl;
				this.status = user.getIconCurrentStatus();
				
				// Load Friendfeed Entry if not
				if (!_iconStatus && user.iconType == IconType.FRIENDFEED) {
					var t:UpdateFFeedUserEntriesThread =
							new UpdateFFeedUserEntriesThread(user.iconUserId);
					t.addEventListener(
							UpdateFFeedAbstractEntriesThread.FINISH,
							function():void {
								status = user.getIconCurrentStatus();
							});
					t.start();
				}
				initContextMenu(user);
				return this;
			}
			
			protected override function commitProperties():void
			{
				super.commitProperties();
				
				if (this._iconNameChanged) {
					this._iconNameChanged = false;
					this.nameText.text = this._iconName;
				}
				if (this._iconStatusChanged) {
					this._iconStatusChanged = false;
					this.statusText.text = this._iconStatus.statusMessage;
					//this.alpha = this.calcTimeToAlpha(this._iconStatus.statusTime);
					this.changeAlpha( this.calcTimeToAlpha(this._iconStatus.statusTime) );
				}
				if (this._iconImageUrlChanged) {
					this._iconImageUrlChanged = false;
					this.image.source = this._iconImageUrl || DefaultIconImage;
				}
				if (this._iconTypeImageChanged) {
					this._iconTypeImageChanged = false;
					this.iconTypeImage.source = this._iconTypeImage;
				}
				if (this._iconIsHotChanged) {
					this._iconIsHotChanged = false;
					if (this._iconIsHot) {
						this.glowOn();
					} else {
						this.glowOff();
					}
				}
			}
			
			public function set status(stat:IStatus):void {
				this._iconStatus = stat;
				this._iconStatusChanged = true;
				this.invalidateProperties();
				this.invalidateDisplayList();
			}
			
			public function set hot(value:Boolean):void {
				this._iconIsHot = value;
				this._iconIsHotChanged = true;
				this.invalidateProperties();
				this.invalidateDisplayList();
			}
			
			private function calcTimeToAlpha(msec:uint):Number {
				var now:uint = (new Date()).getTime();
				var d:int = Math.floor( (now - msec) / (24*60*60*1000) );
				if (d < 1) {
					return 1;
				} else if (d < 3) {
					return 0.8;
				} else if (d < 7) {
					return 0.6;
				} else if (d < 30) {
					return 0.4;
				} else if (d < 180) {
					return 0.3;
				} else {
					return 0.2;
				}
			}
			
			private function changeAlpha(a:Number):void {
				this.image.alpha = a;
				this.nameText.alpha = a;
				this.statusText.alpha = a;
			}
			
			//
			// Hot Glow
			//
			private function glowOn():void {
				var glowFilter:GlowFilter = new GlowFilter(
						0xFF0000,
						0.7,  // alpha
						10, 10, // blurX,Y
						5,    // strength
						1     // quality
						);
				this.setFilters([glowFilter]);
			}
			
			private function glowOff():void {
				this.setFilters([]);
			}
			
			private function setFilters(fs:Array):void {
				this.frame.filters = fs;
			}
			
			//
			// Context Menu
			//
			private function initContextMenu(user:IUser):void {
				var menu:ContextMenu = new ContextMenu();
				menu.addEventListener(
					ContextMenuEvent.MENU_SELECT,
					function():void {
						updateMenu(menu, user);
					});
				this.contextMenu = menu;
			}
			
			private function updateMenu(menu:ContextMenu, user:IUser):void {
				menu.removeAllItems();
				// Status
				for each (var status:IStatus in user.getIconStatuses(10)) {
					menu.addItem(
							createStatusMenuItem(
									status.statusMessage,
									status.statusUrl,
									status.statusTime));
				}
				// Delete
				var menuItemDelete:ContextMenuItem = new ContextMenuItem("Delete", true);
				menuItemDelete.addEventListener(
					ContextMenuEvent.MENU_ITEM_SELECT,
					function():void {
						dispatchEvent(new Event(FaceIcon.DELETE));
					});
				menu.addItem(menuItemDelete);
			}
			
			private function createStatusMenuItem(msg:String, url:String, time:Number):ContextMenuItem {
				var ago:String = DateUtil.ago(time) || "";
				if (ago) {
					ago = " (" + ago + " ago)"
				}
				var item:ContextMenuItem
							= new ContextMenuItem(msg.substr(0, 50) + ago);
				item.addEventListener(
						ContextMenuEvent.MENU_ITEM_SELECT,
						function():void {
							navigateToURL(new URLRequest(url));
						});
				return item;
			}
			
			//
			// Mouse Drag Start
			//
			private function onMouseDown(mouse:MouseEvent):void {
				addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
				addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
				mouseDragStartEvent =
					new MouseDragStartEvent(
						MouseDragStartEvent.MOUSE_DRAG_START,
						mouse.stageX,
						mouse.stageY,
						mouse.bubbles,
						mouse.cancelable,
						mouse.localX,
						mouse.localY,
						mouse.relatedObject,
						mouse.ctrlKey,
						mouse.altKey,
						mouse.shiftKey,
						mouse.buttonDown,
						mouse.delta,
						mouse.commandKey,
						mouse.controlKey,
						mouse.clickCount);
			}
			
			private function onMouseMove(mouse:MouseEvent):void {
				cancelDragStart();
				dispatchEvent( mouseDragStartEvent );
			}
			
			private function onMouseUp(mouse:MouseEvent):void {
				cancelDragStart();
			}
			
			private function cancelDragStart():void {
				removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
				removeEventListener(MouseEvent.MOUSE_UP, onMouseUp);
			}
			
			private function onDoubleClick():void {
				if (!iconUserUrl) return;
				navigateToURL(new URLRequest(iconUserUrl));
			}
			
			//
			// Mouse Pause
			//
			private function onRollOver(mouse:Event):void {
				clearTimeout(mousePauseTimeoutId);
				mousePauseTimeoutId =
					setTimeout(onMousePause, 1500);
			}
			
			private function onMousePause():void {
				this.statusText.lineNumber = 0; // not select
			}
			
			private function onRollOut(mouse:Event):void {
				clearTimeout( mousePauseTimeoutId );
				if (FaceIcon.selectedFaceIcon != this) {
					mousePauseTimeoutId = setTimeout(function():void {
						statusText.lineNumber = 2;
					}, 1000);
				}
			}
			
			//
			// Click & Select
			//
			private function onClick(mouse:Event):void {
				if (!this.isSelected()) {
					select();
				}
			}
			
			private function isSelected():Boolean {
				return (FaceIcon.selectedFaceIcon
						&& FaceIcon.selectedFaceIcon == this);
			}
			
			private function select():void {
				FaceIcon.unselect();
				FaceIcon.selectedFaceIcon = this;
				highlight();
				expand();
			}
			
			private function unselect():void {
				FaceIcon.selectedFaceIcon = null;
				offlight();
				unexpand();
			}
			
			public static function unselect():void {
				if (FaceIcon.selectedFaceIcon) {
					FaceIcon.selectedFaceIcon.unselect();
				}
			}
			
			private function highlight():void {
				this.background.visible = true;
			}
			
			private function offlight():void {
				this.background.visible = false;
			}
			
			private function expand():void {
				statusText.lineNumber = 0;
			}
			
			private function unexpand():void {
				statusText.lineNumber = 2;
			}
		]]>
	</mx:Script>
	<mx:Canvas
		id="background"
		
		width="{frame.width}"
		height="{frame.height}"
		visible="false"
		
		backgroundAlpha="0.4"
		backgroundColor="#CCCCFF"
		
		borderStyle="solid"
	 	borderThickness="1"
	 	borderColor="#AAAAFF"
	 	cornerRadius="6"
		/>
	<mx:VBox
		id="frame"
		x="1"
		y="1"
		
	 	paddingTop="6"
	 	paddingBottom="4"
	 	paddingLeft="2"
		paddingRight="2"
		
		horizontalAlign="center"
		verticalGap="2"
		
		verticalScrollPolicy="off"
		horizontalScrollPolicy="off"
		>
		<mx:Canvas>
			<view:CachedImage id="image"
							  width="48"
							  height="48"
							  x="5"
							  y="0"
							  smoothBitmapContent="true"
							  />
			<mx:Image id="iconTypeImage"
					  x="0"
					  y="{image.height - iconTypeImage.height + 8}"
					  />
		</mx:Canvas>
		<view:FaceIconText id="nameText" text="Name" lineNumber="1"/>
		<view:FaceIconText id="statusText" text="" lineNumber="2"/>
	</mx:VBox>
</mx:Canvas>
