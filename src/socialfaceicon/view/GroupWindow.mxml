<?xml version="1.0" encoding="utf-8"?>
<mx:Window xmlns:mx="http://www.adobe.com/2006/mxml"
	layout="absolute"
	
	width="{frame.width}"
	height="{frame.height}"
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off"
	
	resizable="false"
	showStatusBar="false"
	showTitleBar="false"
	showGripper="false"
	type="lightweight"
	systemChrome="none"
	transparent="true"
	backgroundAlpha="0"
	cornerRadius="0"
	borderStyle="none"
	
	dragEnter="onDragEnter(event)"
	dragDrop="onDragDrop(event)"
	xmlns:view="socialfaceicon.view.*">
	<mx:Script>
		<![CDATA[
			import socialfaceicon.events.MouseDragStartEvent;
			import mx.events.FlexEvent;
			import socialfaceicon.model.DesktopIcon;
			import socialfaceicon.model.DragMousePoint;
			import socialfaceicon.model.DragFormat;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			import mx.core.DragSource;
			import socialfaceicon.model.IUser;
			import socialfaceicon.model.GroupIcon;
			import socialfaceicon.model.DesktopGroup;
			
			private var _desktopGroupId:Number = NaN;
			private var _desktopGroupIdChanged:Boolean = false;
			private var _piled:Number = 0;
			private var _piledChanged:Boolean = false;
			private var faceIcons:IFaceIcons = null;
			
			[Bindable]
			private var _number:int = 0;
			
			public function init(groupId:Number):GroupWindow {
				this.desktopGroupId = groupId;
				return this;
			}
			
			private function set desktopGroupId(groupId:Number):void {
				this._desktopGroupId = groupId;
				this._desktopGroupIdChanged = true;
				invalidateProperties();
				invalidateDisplayList();
			}
			
			public function set piled(value:Number):void {
				this._piled = value;
				this._piledChanged = true;
				invalidateProperties();
				invalidateDisplayList();
			}
			
			protected override function commitProperties():void {
				super.commitProperties();
				if (this._desktopGroupIdChanged) {
					this._desktopGroupIdChanged = false;
					update();
				}
				if (this._piledChanged) {
					this._piledChanged = false;
					update();
				}
			}
			
			private function update():void {
				var desktopGroup:DesktopGroup = getDesktopGroup();
				// move
				this.moveWindowTo( desktopGroup.x, desktopGroup.y );
				// remove all
				if (faceIconsContainer) {
					faceIconsContainer.removeAllChildren();
				}
				// add all
				_number = 0;
				faceIcons = desktopGroup.piled
								? new PiledFaceIcons()
								: new UnpiledFaceIcons();
				for each (var groupIcon:GroupIcon in desktopGroup.getGroupIcons()) {
					this.addIcon( groupIcon);
				}
				faceIconsContainer.addChild( faceIcons as DisplayObject );
				
				// pile button
				pileButton.piled = !!desktopGroup.piled;
				number.visible = !!desktopGroup.piled;
			}
			
			private function getDesktopGroup():DesktopGroup {
				if (!isNaN(this._desktopGroupId)) {
					var desktopGroup:DesktopGroup = new DesktopGroup();
					if (desktopGroup.loadById( this._desktopGroupId )) {
						return desktopGroup;
					}
				}
				return null;
			}
			
			public function moveWindowTo(_x:Number, _y:Number):void {
				if (this.nativeWindow) {
					this.nativeWindow.x = _x;
					this.nativeWindow.y = _y;
				}
			}
			
			public function updateStatus():void {
				if (!faceIcons) return;
				var desktopGroup:DesktopGroup = getDesktopGroup();
				if (!desktopGroup) return;
				faceIcons.updateStatus(desktopGroup);
			}
			
			//
			// Pile
			//
			private function onPileButtonClick():void {
				var desktopGroup:DesktopGroup = getDesktopGroup();
				if (!desktopGroup) return;
				desktopGroup.togglePiled();
			}
			
			//
			// Add FaceIcon
			//
			public function addIcon(groupIcon:GroupIcon):void {
				if (groupIcon && faceIcons) {
					faceIcons.addIcon(groupIcon);
					_number++;
				}
			}
			
			//
			// Delete FaceIcon
			//
			public function removeFaceIcon(groupIcon:GroupIcon):void {
				if (groupIcon && faceIcons) {
					faceIcons.removeIcon(groupIcon);
					_number--;
				}
			}
			
			//
			// Drag Group
			//
			private function onFrameMouseDown(mouse:MouseEvent):void {
				if (isNaN(_desktopGroupId)) return;
				
				frame.addEventListener(MouseEvent.MOUSE_MOVE, onFrameMouseMove);
				frame.addEventListener(MouseEvent.MOUSE_UP, onFrameMouseUp);
			}
			
			private function onFrameMouseMove(mouse:MouseEvent):void {
				cancelDragStart();
				onDragStart(mouse);
			}
			
			private function onDragStart(mouse:MouseEvent):void {
				var dragSource:DragSource = new DragSource();
				dragSource.addData(
					_desktopGroupId,
					DragFormat.DESKTOP_GROUP_ID);
				dragSource.addData(
					new DragMousePoint(mouse, this.nativeWindow),
					DragFormat.DRAG_MOUSE_POINT);
				DragManager.doDrag(this.frame, dragSource, mouse, this);
				DesktopWindow.instance.show();
			}
			
			private function onFrameMouseUp(mouse:MouseEvent):void {
				cancelDragStart();
			}
			
			private function cancelDragStart():void {
				frame.removeEventListener(MouseEvent.MOUSE_MOVE, onFrameMouseMove);
				frame.removeEventListener(MouseEvent.MOUSE_UP, onFrameMouseUp);
			}
			
			private function onFrameDragComplete():void {
				DesktopWindow.instance.hide();
			}
			
			//
			// Drag & Drop
			//
			private function onDragEnter(event:DragEvent):void {
				if (   event.dragSource.hasFormat( DragFormat.DESKTOP_GROUP_ID )
					|| event.dragSource.hasFormat( DragFormat.DESKTOP_ICON_ID )) {
					DragManager.acceptDragDrop(this);
				}
			}
			
			private function onDragDrop(event:DragEvent):void {
				if (event.dragSource.hasFormat( DragFormat.DESKTOP_GROUP_ID )) {
					// Move the group
					onDesktopGroupDragDrop(event);
				} else if (event.dragSource.hasFormat( DragFormat.DESKTOP_ICON_ID )) {
					// Add icon to the group
					onDesktopIconDragDrop(
							event,
							event.dragSource.dataForFormat(
								DragFormat.DESKTOP_ICON_ID)
									as Number);
				}
			}
			
			//
			// Drop DesktopGroup
			//
			private function onDesktopGroupDragDrop(event:DragEvent):void {
				var sourceDesktopGroupId:Number =
						event.dragSource.dataForFormat(
							DragFormat.DESKTOP_GROUP_ID)
								as Number;
				if (this._desktopGroupId == sourceDesktopGroupId) {
					onMyselfDesktopGroupDragDrop(event);
				} else {
					//onAnotherDesktopGroupDragDrop(event);
					// TODO: concat group icons
				}
			}
			
			private function onMyselfDesktopGroupDragDrop(event:DragEvent):void {
				var desktopGroup:DesktopGroup = getDesktopGroup();
				if (!desktopGroup) return;
				var d:Point = DragMousePoint.fromDragSource(
									event.dragSource
								).getDiffInStage(
									event.stageX,
									event.stageY
								);
				desktopGroup.moveTo(
						this.nativeWindow.x + d.x,
						this.nativeWindow.y + d.y);
			}
			
			//
			// Drop DesktopIcon
			//
			private function onDesktopIconDragDrop(event:DragEvent,
													sourceDesktopIconId:Number):void {
				if (isNaN(sourceDesktopIconId)) return;
				var sourceDesktopIcon:DesktopIcon = new DesktopIcon();
				if (!sourceDesktopIcon.loadById( sourceDesktopIconId )) return; 
				
				var desktopGroup:DesktopGroup = getDesktopGroup();
				if (!desktopGroup) return;
				desktopGroup.addUser(
						sourceDesktopIcon.getUser());
				callLater(function():void { // for DragComplete Event Handler
					sourceDesktopIcon.closeAndDelete();
				});
			}
		]]>
	</mx:Script>
	<mx:VBox
		id="frame"

		paddingTop="3"
		paddingBottom="2"
		paddingLeft="3"
		paddingRight="3"
		
		backgroundColor="#000000"
		backgroundAlpha="0.4"
		
		borderColor="#333333"
		borderThickness="0.1"
		borderStyle="solid"
		cornerRadius="10"
		
		verticalScrollPolicy="off"
		horizontalScrollPolicy="off"
		
		mouseDown="onFrameMouseDown(event)"
		dragComplete="onFrameDragComplete()"
		>
		<mx:HBox horizontalGap="1">
			<view:GroupPileButton
				id="pileButton"
				mouseDown="event.stopPropagation()"
				click="onPileButtonClick()"
				/>
			<mx:Text
				id="number"
				text="{_number}"
				selectable="false"
				color="#CCCCCC"
				fontSize="12"
				fontWeight="bold"
				/>
		</mx:HBox>
		<mx:HBox
			id="faceIconsContainer"
			paddingTop="0"
			paddingBottom="6"
			paddingLeft="6"
			paddingRight="6"
			verticalScrollPolicy="off"
			horizontalScrollPolicy="off"
			/>
	</mx:VBox>
	
		
</mx:Window>
