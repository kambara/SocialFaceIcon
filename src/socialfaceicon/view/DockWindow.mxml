<?xml version="1.0" encoding="utf-8"?>
<mx:Window xmlns:mx="http://www.adobe.com/2006/mxml"
	title="Dock"
	alwaysInFront="true"
	verticalAlign="top"
	
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off"
	
	resizable="false"
	showStatusBar="false"
	showTitleBar="false"
	showGripper="false"
	type="lightweight"
	systemChrome="none"
	transparent="true"
	backgroundAlpha="0"
	cornerRadius="0"
	borderStyle="none"
	
	width="{background.width}"
	height="{background.height - 8}"
	
	initialize="onInitialize()"
	resize="onResize()"
	
	dragEnter="onDragEnter(event)"
	dragDrop="onDragDrop(event)"
	>
	<mx:Script>
		<![CDATA[
			import flash.utils.setTimeout;
			import mx.events.ResizeEvent;
			import socialfaceicon.events.MouseDragStartEvent;
			import mx.core.DragSource;
			import socialfaceicon.model.IUser;
			import socialfaceicon.model.HumanDockIcon;
			import socialfaceicon.model.DesktopIcon;
			import socialfaceicon.model.DragFormat;
			import mx.managers.DragManager;
			import mx.events.DragEvent;
			import mx.managers.WindowedSystemManager;
			import mx.core.WindowedApplication;
			import mx.core.Application;
			
			private var friendsWindow:FriendsListWindow;
			private var faceIconTable:Object = {};
			
			private function onInitialize():void {
				initContextMenu();
			}
			
			private function initContextMenu():void {
				var menu:ContextMenu = new ContextMenu();
				var menuItemExit:ContextMenuItem = new ContextMenuItem("Exit");
				menuItemExit.addEventListener(
					ContextMenuEvent.MENU_ITEM_SELECT,
					onMenuItemExitSelect);
				menu.addItem(menuItemExit);
				this.contextMenu = menu;
			}
			
			private function onMenuItemExitSelect(event:ContextMenuEvent):void {
				Application.application.exit();
			}
			
			private function onFrameResize():void {
				setTimeout(function():void {
					background.width = frame.width + 1;
					background.height = frame.height + 8;
				}, 400);
			}
			
			private function onResize():void {
				if (!this.nativeWindow) return;
				var bounds:Rectangle = Screen.mainScreen.visibleBounds;
				nativeWindow.x = bounds.left + (bounds.width - nativeWindow.width)/2;
				nativeWindow.y = bounds.bottom - nativeWindow.height;
			}
			
			//
			// Friends Button
			//
			private function onFriendsButtonClick():void {
				if (!friendsWindow) {
					friendsWindow = new FriendsListWindow();
					friendsWindow.open();
				} else {
					friendsWindow.visible = !friendsWindow.visible;
				}
			}
			
			//
			// Update Status
			//
			public function updateStatus():void {
				for each (var dockIcon:HumanDockIcon in HumanDockIcon.getAllDockIcons()) {
					var faceIcon:FaceIcon = faceIconTable[ dockIcon.id ] as FaceIcon;
					if (faceIcon) {
						var user:IUser = dockIcon.getUser();
						if (user) {
							faceIcon.status = user.getIconCurrentStatus();
						}
					}
				}
			}
			
			//
			// add FaceIcon
			//
			public function addIcon(dockIcon:HumanDockIcon):void {
				var user:IUser = dockIcon.getUser();
				if (!user) return;
				var faceIcon:FaceIcon = new FaceIcon();
				faceIcon.init(user);
				faceIconContainer.addChild(faceIcon);
				faceIconTable[ dockIcon.id ] = faceIcon;
				
				faceIcon.addEventListener(
					MouseEvent.MOUSE_DOWN,
					onFaceIconMouseDown);
				faceIcon.addEventListener(
					MouseDragStartEvent.MOUSE_DRAG_START,
					function(mouse:MouseDragStartEvent):void {
						doDragFaceIcon(dockIcon.id, mouse);
					});
				faceIcon.addEventListener(
					DragEvent.DRAG_COMPLETE,
					onFaceIconDragComplete);
			}
			
			private function onFaceIconMouseDown(mouse:MouseEvent):void {
				mouse.stopPropagation();
			}
			
			public function removeIcon(dockIcon:HumanDockIcon):void {
				var faceIcon:FaceIcon = faceIconTable[ dockIcon.id ] as FaceIcon;
				if (!faceIcon) return;
				faceIconContainer.removeChild( faceIcon );
			}
			
			//
			// Drag FaceIcon
			//
			private function doDragFaceIcon(dockIconId:Number, mouse:MouseEvent):void {
				var dragSource:DragSource = new DragSource();
				dragSource.addData(
					dockIconId,
					DragFormat.DOCK_ICON_ID);
					
				var faceIcon:FaceIcon = FaceIcon(mouse.currentTarget);
				DragManager.doDrag(faceIcon, dragSource, mouse, faceIcon);
				DesktopWindow.instance.show();
			}
			
			private function onFaceIconDragComplete(event:DragEvent):void {
				DesktopWindow.instance.hide();
			}
			
			//
			// Drag & Drop
			//
			private function onDragEnter(event:DragEvent):void {
				if (event.dragSource.hasFormat(DragFormat.DESKTOP_ICON)
					/*|| event.dragSource.hasFormat(DragFormat.LIST_ITEMS)*/
					/*|| event.dragSource.hasFormat(DragFormat.GROUP_ICON)*/)
				{
					DragManager.acceptDragDrop(
							DockWindow(event.currentTarget));
				}
			}
			
			private function onDragDrop(event:DragEvent):void {
				if (event.dragSource.hasFormat( DragFormat.DESKTOP_ICON )) {
					onDesktopIconDragDrop(
							event,
							DesktopIcon(
								event.dragSource.dataForFormat(
									DragFormat.DESKTOP_ICON)));
				}
			}
			
			//
			// Drop DesktopIcon
			//
			private function onDesktopIconDragDrop(event:DragEvent,
													desktopIcon:DesktopIcon):void
			{
				HumanDockIcon.addUser( desktopIcon.getUser() );
				
				callLater(function():void {
					desktopIcon.closeAndDelete();
				});
			}
		]]>
	</mx:Script>
	<mx:Canvas
		id="background"
		
		backgroundColor="#FFFFFF"
		backgroundAlpha="0.4"
		borderColor="#DDDDDD"
		borderThickness="1"
		borderStyle="solid"
		cornerRadius="8"
		
		verticalScrollPolicy="off"
		horizontalScrollPolicy="off"
		>
		<mx:HBox
			id="frame"
			x="0"
			y="0"
			paddingTop="8"
			paddingBottom="8"
			paddingLeft="8"
			paddingRight="8"
			
			resize="onFrameResize()"
			>
			<mx:HBox
				id="faceIconContainer"
				/>
			<mx:VBox>
				<mx:Button
					id="friendsButton"
					label="Friends"
					width="70"
					height="70"
					click="onFriendsButtonClick()"
					/>
			</mx:VBox>
		</mx:HBox>
	</mx:Canvas>
</mx:Window>
