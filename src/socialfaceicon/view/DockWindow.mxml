<?xml version="1.0" encoding="utf-8"?>
<mx:Window xmlns:mx="http://www.adobe.com/2006/mxml"
	title="Dock"
	alwaysInFront="true"
	verticalAlign="top"
	
	width="{hitZone.width}"
	height="{hitZone.height}"
	
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off"
	
	resizable="false"
	
	showStatusBar="false"
	showTitleBar="false"
	showGripper="false"
	type="utility"
	systemChrome="none"
	transparent="true"
	backgroundAlpha="0"
	cornerRadius="0"
	borderStyle="none"
	
	initialize="onInitialize()"
	resize="onResize()"
	
	dragEnter="onDragEnter(event)"
	dragDrop="onDragDrop(event)"
	
	rollOver="onRollOver()"
	rollOut="onRollOut()"
	deactivate="onRollOut()"
	>
	<mx:Script>
		<![CDATA[
			import mx.formatters.SwitchSymbolFormatter;
			import mx.containers.BoxDirection;
			import socialfaceicon.model.DockPosition;
			import socialfaceicon.model.Setting;
			import mx.events.AIREvent;
			import socialfaceicon.model.DesktopGroup;
			import socialfaceicon.model.GroupIcon;
			import org.libspark.betweenas3.events.TweenEvent;
			import org.libspark.betweenas3.tweens.ITween;
			import flash.utils.clearTimeout;
			import socialfaceicon.view.friendslist.FriendsListWindow;
			import org.libspark.betweenas3.easing.Cubic;
			import org.libspark.betweenas3.BetweenAS3;
			import flash.utils.setTimeout;
			import mx.events.ResizeEvent;
			import socialfaceicon.events.MouseDragStartEvent;
			import mx.core.DragSource;
			import socialfaceicon.model.IUser;
			import socialfaceicon.model.HumanDockIcon;
			import socialfaceicon.model.DesktopIcon;
			import socialfaceicon.model.DragFormat;
			import mx.managers.DragManager;
			import mx.events.DragEvent;
			import mx.managers.WindowedSystemManager;
			import mx.core.WindowedApplication;
			import mx.core.Application;
			
			private var faceIconTable:Object = {};
			private var pullOutTimeoutId:int;
			private var position:String = DockPosition.BOTTOM;
			
			[Embed(source="socialfaceicon/assets/system-users.png")]
			[Bindable]
			public var UsersImage:Class;
			
			private function onInitialize():void {
				initPosition();
				initContextMenu();
				
				Application.application.addEventListener(
					AIREvent.APPLICATION_ACTIVATE,
					function():void {
						onResize();
					});
				Application.application.addEventListener(
					AIREvent.APPLICATION_DEACTIVATE,
					function():void {
						onResize();
					});
			}
			
			private function initPosition():void {
				this.position = Setting.dockPosition;
				if (!this.position) {
					this.position =
						(Capabilities.os.indexOf("Mac") >= 0)
							? DockPosition.LEFT
							: DockPosition.BOTTOM;
				}
				
				switch (position) {
					case DockPosition.BOTTOM:
						dockItemContainer.direction = BoxDirection.HORIZONTAL;
						faceIconContainer.direction = BoxDirection.HORIZONTAL;
						separator.width = 1;
						separator.percentHeight = 100;
						break;
					case DockPosition.LEFT:
					case DockPosition.RIGHT:
						dockItemContainer.direction = BoxDirection.VERTICAL;
						faceIconContainer.direction = BoxDirection.VERTICAL;
						separator.percentWidth = 100;
						separator.height = 1;
						break;
				}
			}
			
			//
			// ContextMenu
			//
			private function initContextMenu():void {
				var exitMenuItem:ContextMenuItem = new ContextMenuItem("Exit", true);
				exitMenuItem.addEventListener(
					ContextMenuEvent.MENU_ITEM_SELECT,
					onExitMenuItemSelect);
				
				var menu:ContextMenu = new ContextMenu();
				menu.addItem(createPositionMenuItem("Left",   DockPosition.LEFT));
				menu.addItem(createPositionMenuItem("Right",  DockPosition.RIGHT));
				menu.addItem(createPositionMenuItem("Bottom", DockPosition.BOTTOM));
				menu.addItem(exitMenuItem);
				this.contextMenu = menu;
			}
			
			private function createPositionMenuItem(caption:String, pos:String):ContextMenuItem {
				var menuItem:ContextMenuItem =
						new ContextMenuItem(caption,
											false,
											(pos != this.position));
				menuItem.addEventListener(
					ContextMenuEvent.MENU_ITEM_SELECT,
					function():void {
						onPositionMenuItemSelect(pos);
					});
				return menuItem;
			}
			
			private function onPositionMenuItemSelect(pos:String):void {
				Setting.dockPosition = pos;
				HumanDockIcon.update();
			}
			
			private function onExitMenuItemSelect(event:ContextMenuEvent):void {
				Application.application.exit();
			}
			
			//
			// Resize
			// itemContainer -> (wait) -> background -> dockContainer -> Window -> move
			//
			private function onDockItemContainerResize():void {
				setTimeout(function():void {
					// resize background
					BetweenAS3.tween(
						background, {
							width: dockItemContainer.width + 10 * 2,
							height: dockItemContainer.height + 10 * 2
						}, null, 0.2, Cubic.easeOut).play();
				}, 400);
			}
			
			private function onBackgroundResize():void {
				if (!nativeWindow || nativeWindow.closed) return;
				var bounds:Rectangle = Screen.mainScreen.visibleBounds;
				
				switch (this.position) {
					case DockPosition.BOTTOM:
						// trim bg
						bgContainer.width = background.width;
						bgContainer.height = background.height - 8;
						background.x = 0;
						// area
						hitZone.width = bounds.width;
						hitZone.height = bgContainer.height + 20;
						// centering
						bgContainer.x = (hitZone.width - bgContainer.width)/2;
						bgContainer.y = 20;
						break;
					case DockPosition.LEFT:
						// trim bg
						bgContainer.width = background.width - 8;
						bgContainer.height = background.height;
						background.x = -10;
						// area
						hitZone.width = bgContainer.width + 20;
						hitZone.height = bounds.height;
						// centering
						bgContainer.x = 0;
						bgContainer.y = (hitZone.height - bgContainer.height)/2;
						break;
					case DockPosition.RIGHT:
						// trim bg
						bgContainer.width = background.width - 8;
						bgContainer.height = background.height;
						background.x = 0;
						// area
						hitZone.width = bgContainer.width + 20;
						hitZone.height = bounds.height;
						// centering
						bgContainer.x = 20;
						bgContainer.y = (hitZone.height - bgContainer.height)/2;
						break;
				}
			}
			
			private function onResize():void {
				if (!nativeWindow || nativeWindow.closed) return;
				
				// move to the edge of the screen
				var bounds:Rectangle = Screen.mainScreen.visibleBounds;
				switch (this.position) {
					case DockPosition.BOTTOM:
						nativeWindow.x = bounds.left + (bounds.width - nativeWindow.width)/2;
						nativeWindow.y = bounds.bottom - nativeWindow.height;
						if (this.y > nativeWindow.height) {
							this.y = nativeWindow.height;
						}
						break;
					case DockPosition.LEFT:
						nativeWindow.x = bounds.left;
						nativeWindow.y = bounds.top;
						break;
					case DockPosition.RIGHT:
						nativeWindow.x = bounds.right - hitZone.width;
						nativeWindow.y = bounds.top;
						break;
				}
			}
			
			//
			// RollOver / RollOut
			//
			private function onRollOver():void {
				clearTimeout(pullOutTimeoutId);
				slideIn();
			}
			
			private function onRollOut():void {
				pullOutTimeoutId = setTimeout(slideOut, 1500);
			}
			
			private function slideIn():void {
				this.hitZone.setStyle("backgroundAlpha", 0);
				var to:Object = (this.position == DockPosition.BOTTOM)
									? {y: 0}
									: {x: 0};
				BetweenAS3.tween(
					this, to, null, 0.2, Cubic.easeOut
				).play();
			}
			
			private function slideOut():void {
				if (!nativeWindow || nativeWindow.closed) return;
				
				if (nativeWindow.active) {
					this.x = 0;
					this.y = 0;
					return;
				}
				
				this.hitZone.setStyle("backgroundAlpha", 0.01);
				var to:Object = {};
				switch (this.position) {
					case DockPosition.BOTTOM:
						to["y"] = bgContainer.height;
						break;
					case DockPosition.LEFT:
						to["x"] = - bgContainer.width;
						break;
					case DockPosition.RIGHT:
						to["x"] = bgContainer.width;
						break;
				}
				BetweenAS3.tween(
					this, to, null, 0.2, Cubic.easeOut
				).play();
			}
			
			//
			// Friends Button
			//
			private function onFriendsButtonClick():void {
				FriendsListWindow.show();
			}
			
			//
			// Update Status
			//
			public function updateStatus():void {
				for each (var dockIcon:HumanDockIcon in HumanDockIcon.getAllDockIcons()) {
					var faceIcon:FaceIcon = faceIconTable[ dockIcon.id ] as FaceIcon;
					if (faceIcon) {
						var user:IUser = dockIcon.getUser();
						if (user) {
							faceIcon.status = user.getIconCurrentStatus();
						}
					}
				}
			}
			
			//
			// add FaceIcon
			//
			public function addIcon(dockIcon:HumanDockIcon):void {
				var user:IUser = dockIcon.getUser();
				if (!user) return;
				var faceIcon:FaceIcon = new FaceIcon();
				faceIcon.init(user);
				faceIconContainer.addChild(faceIcon);
				faceIconTable[ dockIcon.id ] = faceIcon;
				
				faceIcon.addEventListener(
					MouseEvent.MOUSE_DOWN,
					onFaceIconMouseDown);
				faceIcon.addEventListener(
					MouseDragStartEvent.MOUSE_DRAG_START,
					function(mouse:MouseDragStartEvent):void {
						doDragFaceIcon(dockIcon.id, mouse);
					});
				faceIcon.addEventListener(
					DragEvent.DRAG_COMPLETE,
					onFaceIconDragComplete);
				faceIcon.addEventListener(
					FaceIcon.DELETE,
					function():void {
						onFaceIconDelete(dockIcon.id);
					});
			}
			
			private function onFaceIconMouseDown(mouse:MouseEvent):void {
				mouse.stopPropagation();
			}
			
			public function removeIcon(dockIcon:HumanDockIcon):void {
				var faceIcon:FaceIcon = faceIconTable[ dockIcon.id ] as FaceIcon;
				if (!faceIcon) return;
				faceIconContainer.removeChild( faceIcon );
			}
			
			private function onFaceIconDelete(dockIconId:Number):void {
				var dockIcon:HumanDockIcon = new HumanDockIcon();
				if (dockIcon.loadById(dockIconId)) {
					dockIcon.closeAndDelete();
				}
			}
			
			//
			// Drag FaceIcon
			//
			private function doDragFaceIcon(dockIconId:Number, mouse:MouseEvent):void {
				var dragSource:DragSource = new DragSource();
				dragSource.addData(
					dockIconId,
					DragFormat.DOCK_ICON_ID);
					
				var faceIcon:FaceIcon = FaceIcon(mouse.currentTarget);
				DragManager.doDrag(faceIcon, dragSource, mouse, faceIcon);
				DesktopWindow.instance.show();
			}
			
			private function onFaceIconDragComplete(event:DragEvent):void {
				DesktopWindow.instance.hide();
			}
			
			//
			// Drag & Drop
			//
			private function onDragEnter(event:DragEvent):void {
				if (   event.dragSource.hasFormat(DragFormat.LIST_ITEMS)
					|| event.dragSource.hasFormat(DragFormat.DESKTOP_ICON_ID)
					|| event.dragSource.hasFormat(DragFormat.GROUP_ICON_ID))
				{
					DragManager.acceptDragDrop(
							DockWindow(event.currentTarget));
					slideIn();
				}
			}
			
			private function onDragDrop(event:DragEvent):void {
				if (event.dragSource.hasFormat(DragFormat.LIST_ITEMS)) {
					onFriendsListItemsDragDrop(event);
				} else if (event.dragSource.hasFormat(DragFormat.DESKTOP_ICON_ID)) {
					onDesktopIconDragDrop(
							event,
							event.dragSource.dataForFormat(
								DragFormat.DESKTOP_ICON_ID)
									as Number);
				} else if (event.dragSource.hasFormat( DragFormat.GROUP_ICON_ID )) {
					onGroupIconDragDrop(
							event,
							event.dragSource.dataForFormat(
								DragFormat.GROUP_ICON_ID)
									as Number);
				}
			}
			
			//
			// Add Icon from FriendsList
			//
			private function onFriendsListItemsDragDrop(event:DragEvent):void {
				var dataArray:Array =
						event.dragSource.dataForFormat(DragFormat.LIST_ITEMS) as Array;
				var user:IUser = IUser(dataArray[0]);
				
				HumanDockIcon.addUser( user );
			}
			
			//
			// Drop DesktopIcon
			//
			private function onDesktopIconDragDrop(event:DragEvent,
													desktopIconId:Number):void
			{
				if (isNaN(desktopIconId)) return;
				var desktopIcon:DesktopIcon = new DesktopIcon();
				if (!desktopIcon.loadById( desktopIconId )) return;
				
				HumanDockIcon.addUser( desktopIcon.getUser() );
				
				callLater(function():void {
					desktopIcon.closeAndDelete();
				});
			}
			
			//
			// Drag Icon from Group
			//
			private function onGroupIconDragDrop(event:DragEvent, groupIconId:Number):void {
				if (isNaN(groupIconId)) return;
				var sourceGroupIcon:GroupIcon = new GroupIcon();
				if (!sourceGroupIcon.loadById( groupIconId )) return;
				
				HumanDockIcon.addUser( sourceGroupIcon.getUser() );
				
				var sourceGroup:DesktopGroup = sourceGroupIcon.getDesktopGroup();
				callLater(function():void {
					sourceGroup.deleteGroupIconOrDisband( sourceGroupIcon );
				});
			}
		]]>
	</mx:Script>
	<mx:Canvas
		id="hitZone"
		x="0"
		y="0"
		verticalScrollPolicy="off"
		horizontalScrollPolicy="off"
		
		backgroundColor="#FF0000"
		backgroundAlpha="0"
		
		borderColor="#FF0000"
		borderThickness="1"
		borderStyle="none"
		>
	<mx:Canvas
		id="bgContainer"
		x="0"
		y="0"
		
		verticalScrollPolicy="off"
		horizontalScrollPolicy="off"
		
		borderColor="#0000FF"
		borderThickness="1"
		borderStyle="none"
		>
		<mx:Canvas
			id="background"
			x="0"
			y="0"
			
			backgroundColor="#000000"
			backgroundAlpha="0.4"
			
			borderColor="#333333"
			borderThickness="2"
			borderStyle="solid"
			cornerRadius="8"
			
			verticalScrollPolicy="off"
			horizontalScrollPolicy="off"
			
			resize="onBackgroundResize()"
			>
			<mx:Box
				id="dockItemContainer"
				x="8"
				y="8"
				direction="horizontal"
				horizontalAlign="center"
				
				borderColor="#FF0000"
				borderThickness="2"
				borderStyle="none"
				
				resize="onDockItemContainerResize()"
				>
				<mx:Box
					id="faceIconContainer"
					direction="horizontal"
					minWidth="60"
					minHeight="60"
					verticalGap="0"
					horizontalGap="0"
					/>
				<mx:Canvas
					id="separator"
					width="1"
					height="100%"
					backgroundColor="#555555"
					/>
				<mx:LinkButton
					id="friendsButton"
					icon="{UsersImage}"
					label="Friends"
					labelPlacement="bottom"
					color="#EEEEEE"
					fontWeight="normal"
					fontSize="12"
					
					click="onFriendsButtonClick()"
					/>
			</mx:Box>
		</mx:Canvas>
	</mx:Canvas>
	</mx:Canvas>
</mx:Window>
